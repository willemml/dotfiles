#!/usr/bin/env bash

LOCALBIN="$HOME/.local/bin"

# Install Oh My ZSH (only if zsh is available)
if type zsh &>/dev/null; then
	sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi

if [ $(uname) == "Darwin" ]; then
	# Install Homebrew
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

	# Make sure brew is in the environement
	eval "$(/opt/homebrew/bin/brew shellenv)"

	# Install brew packages/apps
	brew bundle --global

	# iTerm2 config
	defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "~/.config/iterm2"
	defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
fi

# Setup git gpg signing
git config --global gpg.program $(which gpg)
# List available signing keys
gpg --list-secret-keys --keyid-format=long
echo "Choose the gpg key you want to use for signing git commits"
echo "Format: \'sec   4096R/IDHERE 2016-03-10 [expires: 2017-03-10]\'"
read GPG_KEY_ID
# Set the default git commit signing key
git config --global user.signingkey $GPG_KEY_ID
# Enable commit signing by default globally
git config --global commit.gpgsign true
# Set the correct path for the pinentry program
echo "pinentry-program /opt/homebrew/bin/pinentry-mac" >>~/.gnupg/gpg-agent.conf
killall gpg-agent

# Install Rust
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

# Install Rust toolchains, components and targets
rustup install nightly
rustup component add cargo clippy rust-docs rust-std rustc rustfmt
rustup component add --toolchain nightly cargo clippy llvm-tools-preview rust-src rustc rustfmt

# Install Cargo crates
cargo install cargo-binutils cargo-bloat \
	cargo-deny \
	cargo-embed \
	cargo-expand \
	cargo-flash \
	cargo-generate \
	cargo-make \
	grex \
	miniserve \
	probe-rs-cli \
	probe-run \
	cargo-check

export NVM_DIR="$HOME/.local/nvm" && (
	git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
	cd "$NVM_DIR"
	git checkout $(git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1))
) && \. "$NVM_DIR/nvm.sh"

nvm install node

curl -o- -L https://yarnpkg.com/install.sh | bash

yarn global upgrade

# Load the new dotfiles
source "$HOME/.zshrc"
