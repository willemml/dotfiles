#+title: Yabai Config
#+PROPERTY: header-args:sh :shebang "#!/bin/sh"
#+PROPERTY: header-args:sh+ :tangle "../.yabairc"
#+PROPERTY: header-args:sh+ :comments link

Configure [[https://github.com/koekeishiya/yabai][yabai]] for use on my system. Yabai is a tiling window manager
for macOS.

#+begin_src sh
  # This script was generated from an org-mode document see the docs
  # directory.
#+end_src

* Basic config

Simple yabai config that doesn't depend much on monitor setup and
task.

** Scripting addition

Enable the yabai scripting addition, make sure to configure sudo
correctly see [[https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(from-HEAD)#configure-scripting-addition][the wiki]] for more info.

#+begin_src sh
  function init_scripting {
	  yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa" label="load_scripting_additions"
	  sudo yabai --load-sa
  }
#+end_src

** Window appearance

Configure the window borders, currently they are disabled. Also does
setup for window opacity changing (also disabled).

#+begin_src sh
  function init_appearance {
	  yabai -m config window_border off
	  yabai -m config window_shadow off
	  yabai -m config window_opacity off
  }
#+end_src

** Layout & padding

Enable tiling mode and configure the window padding and gap.

#+begin_src sh
  function init_layout_padding {
	  yabai -m config layout bsp
	  yabai -m config top_padding 10
	  yabai -m config bottom_padding 10
	  yabai -m config left_padding 10
	  yabai -m config right_padding 10
	  yabai -m config window_gap 10
  }
#+end_src

** Windows

Make child windows spawn in the right side of a split.

#+begin_src sh
  function init_window_placement {
	  yabai -m config window_placement second_child
	  yabai -m config window_topmost off
  }
#+end_src

** Mouse

Use ~fn~ as the mouse modifier, when holding ~fn~ and mouse left click
and drag anywhere on a window will move it. When holding ~fn~ and
right click dragging on any window will resize it. When moving a
window, dropping it will cause it to swap places with the window it is
dropped on.

When changing focus to another space/window/display the mouse will
automatically move there. When moving the mouse, the focus will follow
the mouse.

#+begin_src sh
  function init_mouse {
	  yabai -m config mouse_follows_focus on
	  yabai -m config focus_follows_mouse autofocus
	  yabai -m config mouse_modifier fn
	  yabai -m config mouse_action1 move
	  yabai -m config mouse_action2 resize
	  yabai -m config mouse_drop_action swap
  }
#+end_src

** Splits

Don't auto balance splits, also set the ratio of splitting to 50%.

#+begin_src sh
  function init_splits {
	  yabai -m config split_ratio 0.50
	  yabai -m config auto_balance off
  }
#+end_src

* Wrapper functions

Simple wrappers for ~jq~ and ~yabai~ for simple tasks.

** Get spaces

Get all spaces from yabai, optionally only get spaces on a specific
display (by index).

#+begin_src sh
  function get_spaces {
	  if [ -z ${1+x} ]; then
		  yabai -m query --spaces
	  else
		  get_spaces | jq --arg display $1 'map(select(.display == ($display | tonumber)))'
	  fi
  }
#+end_src

** Get displays

Get all available displays from yabai.

#+begin_src sh
  function get_displays {
	  yabai -m query --displays
  }
#+end_src

** Get windows

Get all open windows from yabai.

#+begin_src sh
  function get_windows {
	  yabai -m query --windows
  }
#+end_src

** Count displays

Gets the number of available displays.

#+begin_src sh
  function count_displays {
	  get_displays | jq length
  }
#+end_src

** Get space on display

Gets the space at index on the given display, arguments are ~display~
and ~index~.

#+begin_src sh
  function get_space_on_display {
	  test -z ${1+x} && echo "missing display" && return 1
	  test -z ${2+x} && echo "missing space" && return 1

	  get_spaces | jq --arg display $1 --arg space $2 'map(select(.display == ($display | tonumber)))[($space | tonumber)].index'
  }
#+end_src

** Get fullscreen windows

Get the a list of windows that are in macOS native fullscreen mode.

#+begin_src sh
  function get_fullscreen_windows {
	  get_windows | jq '.[] | select(."is-native-fullscreen") | .'
  }
#+end_src

** Get fullscreen window spaces

Get a list of spaces that are actually fullscreen windows.

#+begin_src sh
  function get_fullscreen_spaces {
	  get_fullscreen_windows | jq '.[] | .space' | uniq -u
  }
#+end_src

** Create space

Creates a space on the given display (does this by getting the index
of the first space on the display and passes it to yabai's create
space function).

#+begin_src sh
  function create_space {
	  test -z ${1+x} && echo "missing display" && return 1

	  yabai -m space --create $(get_space_on_display $1 0)
  }
#+end_src

** Delete space

Deletes the space at the given index on the given display (space index
relative to display, not global, so 0 is the first space on the
display).

#+begin_src sh
  function delete_space {
	  test -z ${1+x} && echo "missing display" && return 1
	  test -z ${2+x} && echo "missing space" && return 1

	  yabai -m space --destroy $(get_space_on_display $1 $2)
  }
#+end_src

** Count spaces

Gets the number of spaces on the given display.

#+begin_src sh
  function count_spaces {
	  test -z ${1+x} && echo "missing display" && return 1

	  get_spaces | jq --arg display $1 'map(select(.display == ($display | tonumber))) | length'
  }
#+end_src

** Get application window

Get the first window for an application. Returns ~null~ if no windows
are found.

#+begin_src sh
  function get_application_window {
	  test -z ${1+x} && echo "missing app name" && return 1
	  get_windows | jq --arg app "$1" 'map(select(.app == $app)) | .[0].id'
  }
#+end_src

* Helper functions

More complex functions to help build the window layout.

** Cleanup spaces

Deletes all spaces except required (one per display).

#+begin_src sh
  function cleanup_spaces {
	  for i in $(seq 1 $(count_displays)); do
		  for j in $(seq 1 $(count_spaces $i)); do
			  delete_space $i $j
		  done
	  done
  }
#+end_src

** Ensure spaces

Ensures that the given display has the given number of spaces,
creates and destroys spaces as needed.

#+begin_src sh
  function ensure_spaces {
	  test -z ${1+x} && echo "missing display" && return 1
	  test -z ${2+x} && echo "missing number of spaces" && return 1

	  while [ "$(count_spaces $1)" -gt "$2" ]; do
		  delete_space $1 0
	  done
	  while [ "$(count_spaces $1)" -lt "$2" ]; do
		  create_space $1 0
	  done
  }
#+end_src

** Focus application

Focus the first window found for the application with the given name.

#+begin_src sh
  function focus_application {
	  test -z ${1+x} && echo "missing app name" && return 1
	  local window_id=$(get_application_window $1)
	  test "$window_id" = "null" && echo "no windows found for that app" && return 1
	  yabai -m window --focus $window_id
  }
#+end_src

* Space organization

Setup, organize and label spaces for different displays and tasks.

** Single display

Initializes spaces for use with single display (internal laptop
display.)

Currently just creates 4 spaces and names them according to their main
purpose, ~term~ for all terminal windows, ~web~ for web browsers and
web related apps (e.g. electron apps). ~code~ for editors and coding
(Emacs and Xcode) and then ~random~ for everything else (music, chat
clients, etc...)

#+begin_src sh
  function single_display_spaces {
	  ensure_spaces 1 4
	  yabai -m space 1 --label term
	  yabai -m space 2 --label web
	  yabai -m space 3 --label code
	  yabai -m space 4 --label random
  }
#+end_src

** Double display

Initializes spaces for use with 2 displays (internal + 4K external).

Same as [[Single display]] but moves web and random to the external
display for easier reading and more web browsing space.

#+begin_src sh
  function dual_display_spaces {
	  ensure_spaces 1 3
	  ensure_spaces 2 1
	  yabai -m space $(get_space_on_display 1 0) --label term
	  yabai -m space $(get_space_on_display 1 1) --label code
	  yabai -m space $(get_space_on_display 2 0) --label web
	  yabai -m space $(get_space_on_display 2 1) --label random
  }
#+end_src

** Triple display

Initializes spaces for use with 3 displays (internal + 2x 4K
external).

Puts ~term~ on the internal display, gives ~web~ it's own external
display and then puts ~code~ and ~random~ together (they rarely need
to be used together but ~term~, ~web~ and ~code~ are frequently needed
at the same time (documentation + testing of code).

#+begin_src sh
  function triple_display_spaces {
	  ensure_spaces 1 2
	  ensure_spaces 2 1
	  ensure_spaces 3 1
	  yabai -m space $(get_space_on_display 1 0) --label term
	  yabai -m space $(get_space_on_display 1 1) --label random
	  yabai -m space $(get_space_on_display 2 0) --label web
	  yabai -m space $(get_space_on_display 3 0) --label code
  }
#+end_src

** Init

Check the number of displays and then initialize spaces
accordingly.

#+begin_src sh
  function init_spaces {
	  cleanup_spaces
	  (($(count_displays) == 1)) && single_display_spaces
	  (($(count_displays) == 2)) && dual_display_spaces
	  (($(count_displays) == 3)) && triple_display_spaces

	  echo "Spaces initialized, found $(count_displays) displays."
  }
#+end_src

Setup the display change listeners.

#+begin_src sh
  function init_spaces_signals {
	  yabai -m signal --add \
			event=display_added \
			action="source ~willem/.yabairc --sources && on_display_update" \
			label="init_space_add_disp"
	  yabai -m signal --add \
			event=display_removed \
			action="source ~willeml/.yabairc --sources && on_display_update" \
			label="init_space_del_disp"
  }
#+end_src

* Rules

Assign different apps to different spaces, also make sure some dialogs
in apps that don't resize well or shouldn't be tiled are set to be
floating windows.

** Dialogs + Utilities

Make sure some common windows that don't take well to resizing are not
managed by yabai and remain floating.

#+begin_src sh
  function init_floating_rules {
	  yabai -m rule --add label="float_finder_dialogs" app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref)" manage=off
	  yabai -m rule --add label="float_safari_prefs" app="^Safari$" title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advance)$" manage=off
	  yabai -m rule --add label="float_settings" app="^System Settings$" title=".*" manage=off
	  yabai -m rule --add label="float_appstore" app="^App Store$" manage=off
	  yabai -m rule --add label="float_activitymon" app="^Activity Monitor$" manage=off
	  yabai -m rule --add label="float_calc" app="^Calculator$" manage=off
	  yabai -m rule --add label="float_dictionary" app="^Dictionary$" manage=off
	  yabai -m rule --add label="float_iterm_prefs" app="^iTerm$" title="Preferences" manage=off
  }
#+end_src

** Spaces

Make sure apps stay in their designated spaces.

#+begin_src sh
  function init_location_rules {
	  yabai -m rule --add label="loc_iterm" app="^iTerm$" space="term"

	  yabai -m rule --add label="loc_safari" app="^Safari$" space="web"

	  yabai -m rule --add label="loc_music" app="^Music$" space="random"
	  yabai -m rule --add label="loc_discord" app="^Discord$" space="random"
	  yabai -m rule --add label="loc_messages" app="^Messages$" space="random"
	  yabai -m rule --add label="loc_telegram" app="^Telegram$" space="random"

	  yabai -m rule --add label="loc_xcode" app="^Xcode$" space="code"
	  yabai -m rule --add label="loc_emacs" app="^Emacs$" space="code"
  }
#+end_src

* On display update

When displays are added or removed, reinit the spaces and reload the
rules for window locations.

#+begin_src sh
  function on_display_update {
	  init_spaces
	  init_floating_rules
	  init_location_rules
  }
#+end_src

* Init

Initialize everything, the if statement at the bottom is there to
allow loading the functions in this file without running everything
again (usefull for signals).

#+begin_src sh
  function init_yabai {
	  echo "Initializing scriping additions..."
	  init_scripting
	  echo "Initializing appearance..."
	  init_appearance
	  echo "Initializing layout & padding..."
	  init_layout_padding
	  echo "Initializing window placement..."
	  init_window_placement
	  echo "Initializing mouse..."
	  init_mouse
	  echo "Initializing splits..."
	  init_splits

	  echo "Initializing spaces..."
	  init_spaces
	  echo "Initializing signals for spaces..."
	  init_spaces_signals
	  echo "Initializing floating window rules..."
	  init_floating_rules
	  echo "Initializing tiling location rules..."
	  init_location_rules

	  echo "Yabai configuration loaded."
  }

  if [ "${1}" != "--sources" ]; then
	  init_yabai
  fi
#+end_src
