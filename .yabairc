#!/bin/sh
# Comment about generation

# Tells readers of the exported shell script that it was generated by
# this org doc.


# [[file:docs/yabai.org::*Comment about generation][Comment about generation:1]]
# This script was generated from an org-mode document.
# Comment about generation:1 ends here

# Scripting addition

# Enable the yabai scripting addition, make sure to configure sudo
# correctly see [[https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(from-HEAD)#configure-scripting-addition][the wiki]] for more info.


# [[file:docs/yabai.org::*Scripting addition][Scripting addition:1]]
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
sudo yabai --load-sa
# Scripting addition:1 ends here

# Window appearance

# Configure the window borders, currently they are disabled. Also does
# setup for window opacity changing (also disabled).


# [[file:docs/yabai.org::*Window appearance][Window appearance:1]]
yabai -m config window_border off
yabai -m config window_shadow off
yabai -m config window_opacity off
# Window appearance:1 ends here

# Layout & padding

# Enable tiling mode and configure the window padding and gap.


# [[file:docs/yabai.org::*Layout & padding][Layout & padding:1]]
yabai -m config layout bsp
yabai -m config top_padding 10
yabai -m config bottom_padding 10
yabai -m config left_padding 10
yabai -m config right_padding 10
yabai -m config window_gap 10
# Layout & padding:1 ends here

# Windows

# Make sure floating windows are always on top also make child windows
# spawn in the right side of a split.


# [[file:docs/yabai.org::*Windows][Windows:1]]
yabai -m config window_placement second_child
yabai -m config window_topmost on
# Windows:1 ends here

# Mouse

# Use ~fn~ as the mouse modifier, when holding ~fn~ and mouse left click
# and drag anywhere on a window will move it. When holding ~fn~ and
# right click dragging on any window will resize it. When moving a
# window, dropping it will cause it to swap places with the window it is
# dropped on.

# When changing focus to another space/window/display the mouse will
# automatically move there. When moving the mouse, the focus will follow
# the mouse.


# [[file:docs/yabai.org::*Mouse][Mouse:1]]
yabai -m config mouse_follows_focus on
yabai -m config focus_follows_mouse autofocus
yabai -m config mouse_modifier fn
yabai -m config mouse_action1 move
yabai -m config mouse_action2 resize
yabai -m config mouse_drop_action swap
# Mouse:1 ends here

# Splits

# Don't auto balance splits, also set the ratio of splitting to 50%.


# [[file:docs/yabai.org::*Splits][Splits:1]]
yabai -m config split_ratio 0.50
yabai -m config auto_balance off
# Splits:1 ends here

# Get spaces

# Get all spaces from yabai, optionally only get spaces on a specific
# display (by index).


# [[file:docs/yabai.org::*Get spaces][Get spaces:1]]
function get_spaces {
	if [ -z ${1+x} ]; then
		yabai -m query --spaces
	else
		get_spaces | jq --arg display $1 'map(select(.display == $display))'
	fi
}
# Get spaces:1 ends here

# Get displays

# Get all available displays from yabai.


# [[file:docs/yabai.org::*Get displays][Get displays:1]]
function get_displays {
	yabai -m query --displays
}
# Get displays:1 ends here

# Get windows

# Get all open windows from yabai.


# [[file:docs/yabai.org::*Get windows][Get windows:1]]
function get_windows {
	yabai -m query --windows
}
# Get windows:1 ends here

# Count displays

# Gets the number of available displays.


# [[file:docs/yabai.org::*Count displays][Count displays:1]]
function count_displays {
	get_displays | jq length
}
# Count displays:1 ends here

# Get space on display

# Gets the space at index on the given display, arguments are ~display~
# and ~index~.


# [[file:docs/yabai.org::*Get space on display][Get space on display:1]]
function get_space_on_display {
	test -z ${1+x} && echo "missing display" && return 1
	test -z ${2+x} && echo "missing space" && return 1

	get_spaces | jq --arg display $1 --arg space $2 'map(select(.display == $display))[$space].index'
}
# Get space on display:1 ends here

# Get fullscreen windows

# Get the a list of windows that are in macOS native fullscreen mode.


# [[file:docs/yabai.org::*Get fullscreen windows][Get fullscreen windows:1]]
function get_fullscreen_windows {
	get_windows | jq '.[] | select(."is-native-fullscreen") | .'
}
# Get fullscreen windows:1 ends here

# Get fullscreen window spaces

# Get a list of spaces that are actually fullscreen windows.


# [[file:docs/yabai.org::*Get fullscreen window spaces][Get fullscreen window spaces:1]]
function get_fullscreen_spaces {
	get_fullscreen_windows | jq '.[] | .space' | uniq -u
}
# Get fullscreen window spaces:1 ends here

# Create space

# Creates a space on the given display (does this by getting the index
# of the first space on the display and passes it to yabai's create
# space function).


# [[file:docs/yabai.org::*Create space][Create space:1]]
function create_space {
	test -z ${1+x} && echo "missing display" && return 1

	yabai -m space --create $(get_space_on_display $1 0)
}
# Create space:1 ends here

# Delete space

# Deletes the space at the given index on the given display (space index
# relative to display, not global, so 0 is the first space on the
# display).


# [[file:docs/yabai.org::*Delete space][Delete space:1]]
function delete_space {
	test -z ${1+x} && echo "missing display" && return 1
	test -z ${2+x} && echo "missing space" && return 1

	yabai -m space --destroy $(get_space_on_display $1 $2)
}
# Delete space:1 ends here

# Count spaces

# Gets the number of spaces on the given display.


# [[file:docs/yabai.org::*Count spaces][Count spaces:1]]
function count_spaces {
	test -z ${1+x} && echo "missing display" && return 1

	get_spaces | jq --arg display $2 'map(select(.display == $display)) | length'
}
# Count spaces:1 ends here

# Ensure spaces

# Ensures that the given display has the required number of displays,
# creates and destroys spaces as needed.


# [[file:docs/yabai.org::*Ensure spaces][Ensure spaces:1]]
function ensure_spaces {
	test -z ${1+x} && echo "missing display" && return 1
	test -z ${2+x} && echo "missing number of spaces" && return 1

	while (($(count_spaces $1) > $2)); do
		delete_space $1 0
	done
	while (($(count_spaces $1) < $2)); do
		create_space $1 0
	done
}
# Ensure spaces:1 ends here

# Single display

# Initializes spaces for use with single display (internal laptop
# display.)

# Currently just creates 4 spaces and names them according to their main
# purpose, ~term~ for all terminal windows, ~web~ for web browsers and
# web related apps (e.g. electron apps). ~code~ for editors and coding
# (Emacs and Xcode) and then ~random~ for everything else (music, chat
# clients, etc...)


# [[file:docs/yabai.org::*Single display][Single display:1]]
function single_display_spaces {
	ensure_spaces 1 4
	yabai -m space 1 --label term
	yabai -m space 2 --label web
	yabai -m space 3 --label code
	yabai -m space 4 --label random
}
# Single display:1 ends here

# Double display

# Initializes spaces for use with 2 displays (internal + 4K external).

# Same as [[Single display]] but moves web and random to the external
# display for easier reading and more web browsing space.


# [[file:docs/yabai.org::*Double display][Double display:1]]
function dual_display_spaces {
	ensure_spaces 1 2
	ensure_spaces 2 2
	yabai -m space $(get_space_on_display 1 0) --label term
	yabai -m space $(get_space_on_display 1 1) --label code
	yabai -m space $(get_space_on_display 2 0) --label web
	yabai -m space $(get_space_on_display 2 1) --label random
}
# Double display:1 ends here

# Triple display

# Initializes spaces for use with 3 displays (internal + 2x 4K
# external).

# Puts ~term~ on the internal display, gives ~web~ it's own external
# display and then puts ~code~ and ~random~ together (they rarely need
# to be used together but ~term~, ~web~ and ~code~ are frequently needed
# at the same time (documentation + testing of code).


# [[file:docs/yabai.org::*Triple display][Triple display:1]]
function triple_display_spaces {
	ensure_spaces 1 1
	ensure_spaces 2 1
	ensure_spaces 3 2
	yabai -m space $(get_space_on_display 1 0) --label term
	yabai -m space $(get_space_on_display 2 0) --label web
	yabai -m space $(get_space_on_display 3 0) --label code
	yabai -m space $(get_space_on_display 3 1) --label random
}
# Triple display:1 ends here

# Init

# Check the number of displays and then initialize spaces
# accordingly.


# [[file:docs/yabai.org::*Init][Init:1]]
function init_spaces {
	(($(count_displays) == 1)) && single_display_spaces
	(($(count_displays) == 2)) && dual_display_spaces
	(($(count_displays) == 3)) && triple_display_spaces
}

init_spaces
# Init:1 ends here



# Setup the display change listeners.


# [[file:docs/yabai.org::*Init][Init:2]]
yabai -m event --add event=display_added action="init_spaces" label="init_space_add_disp"
yabai -m event --add event=display_removed action="init_spaces" label="init_space_del_disp"
# Init:2 ends here

# Dialogs + Utilities

# Make sure some common windows that don't take well to resizing are not
# managed by yabai and remain floating.


# [[file:docs/yabai.org::*Dialogs + Utilities][Dialogs + Utilities:1]]
yabai -m rule --add label="float_finder_dialogs" app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref)" manage=off
yabai -m rule --add label="float_safari_prefs" app="^Safari$" title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advance)$" manage=off
yabai -m rule --add label="float_settings" app="^System Settings$" title=".*" manage=off
yabai -m rule --add label="float_appstore" app="^App Store$" manage=off
yabai -m rule --add label="float_activitymon" app="^Activity Monitor$" manage=off
yabai -m rule --add label="float_calc" app="^Calculator$" manage=off
yabai -m rule --add label="float_dictionary" app="^Dictionary$" manage=off
yabai -m rule --add label="float_iterm_prefs" app="^iTerm$" title="Preferences" manage=off
# Dialogs + Utilities:1 ends here

# Spaces

# Make sure apps stay in their designated spaces.


# [[file:docs/yabai.org::*Spaces][Spaces:1]]
yabai -m rule --add label="loc_iterm" app="^iTerm$" space="term" manage=on

yabai -m rule --add label="loc_safari" app="^Safari$" space="web" manage=on

yabai -m rule --add label="loc_music" app="^Music$" space="random" manage=on
yabai -m rule --add label="loc_discord" app="^Discord$" space="random" manage=on
yabai -m rule --add label="loc_messages" app="^Messages$" space="random" manage=on
yabai -m rule --add label="loc_telegram" app="^Telegram$" space="random" manage=on

yabai -m rule --add label="loc_xcode" app="^Xcode$" space="code" manage=on
yabai -m rule --add label="loc_emacs" app="^Emacs$" space="code" manage=on
# Spaces:1 ends here

# End

# Tell user that configuration is finished.


# [[file:docs/yabai.org::*End][End:1]]
echo "Yabai configuration loaded..."
# End:1 ends here
